import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:insta_app/widgets/header.dart';
import 'package:insta_app/widgets/progress.dart';

final usersRef =  FirebaseFirestore.instance.collection('users');

class Timeline extends StatefulWidget {
  @override
  _TimelineState createState() => _TimelineState();
}

class _TimelineState extends State<Timeline> {
  List <dynamic> users = [];
  @override
  void initState() {
    /*getUserById();*/
    getUsers();
    //createUser();
    updateUser();
    deleteUser();
    // TODO: implement initState
    super.initState();
  }

  createUser() async{
   await  usersRef.doc("id_hhhdkjknk").set({   //if we want to add id by itself
      "username": "James",
      "postCount": 0,
      "isAdmin": false,
    });
   /*await  usersRef.add({   //if we dont want to add id by itself
     "username": "Jeff",
     "postCount": 0,
     "isAdmin": false,
   });*/
  }
  updateUser()async{
    /*await usersRef.doc("id_hdkjknk").update({
      "username": "John",
      "postCount": 0,
      "isAdmin": false,
    });*/
    final doc = await usersRef.doc("hL5OrYQK6NPjAeB1JhBl").get();
    if (doc.exists){
      doc.reference.update({
        "username": "Harshit",
        "postCount": 10,
        "isAdmin": false,
      });
    }
  }

  deleteUser() async{
    /*await usersRef.doc("id_hdkjknk").delete();*/
    final DocumentSnapshot doc = await usersRef.doc("EyskSltoIEjS6UFbI8BH").get();
    if (doc.exists){
      doc.reference.delete();
    }
  }
getUsers() async{
    /*await usersRef.get().then((QuerySnapshot snapshot ){ // Used when we dont want to assign this in a variable
      snapshot.docs.forEach((DocumentSnapshot doc) {
        print(doc.data());
        print(doc.id);
        print(doc.exists);
      });
    } );*/
   /* final QuerySnapshot snapshot = await usersRef.where("postCount", isGreaterThan: 2).where("username", isEqualTo: "Dev") .get();*/  // Query For conditions ... For more than one query we have to create index in firestore
  //final QuerySnapshot snapshot = await usersRef.orderBy("postCount", descending:  true).get();  // Order By
  //final QuerySnapshot snapshot = await usersRef.limit(2).get(); // Want to get only one document
  final QuerySnapshot snapshot = await usersRef.get();
  setState(() {
    users = snapshot.docs;
  });

  /*snapshot.docs.forEach((DocumentSnapshot doc) {
      print(doc.data());
      print(doc.id);
      print(doc.exists);
    });*/
}
/*getUserById() async{
  final String id = "DTZsQWBSJKcCZNpxgjVn" ;
  /*await usersRef.doc(id).get().then((DocumentSnapshot doc){
    print(doc.data());
    print(doc.id);
    print(doc.exists);
  });*/
  final DocumentSnapshot doc = await usersRef.doc(id).get();
  print(doc.data());
  print(doc.id);
  print(doc.exists);
}
*/
  @override
  Widget build(context) {
    return Scaffold(
      appBar: header(context , isAppTitle: true),
      body: /*FutureBuilder <QuerySnapshot> (future: usersRef.get(),
        builder: (context, snapshot){
        if(!snapshot.hasData){
          return circularProgress();
        }
        final List<Text> children = snapshot.data.docs.map((doc) => Text(doc['username'])).toList();
        return Container(
          child: ListView(
            children: children,
          ),
        );
        },
      ),*/
      StreamBuilder <QuerySnapshot> (stream: usersRef.snapshots(),  //Immediately Show new user if added
        builder: (context, snapshot){
          if(!snapshot.hasData){
            return circularProgress();
          }
          final List<Text> children = snapshot.data.docs.map((doc) => Text(doc['username'])).toList();
          return Container(
            child: ListView(
              children: children,
            ),
          );
        },
      ),
    );
  }
}
/*Container(
        child: ListView(
          children: users.map((user) => Text(user['username'])).toList(),)
      ),*/